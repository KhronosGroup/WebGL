<?xml version="1.0" encoding="UTF-8"?>
<draft href="WEBGL_multi_draw/">
  <name>WEBGL_multi_draw</name>

  <contact> <a href="https://www.khronos.org/webgl/public-mailing-list/">WebGL
  working group</a> (public_webgl 'at' khronos.org) </contact>

  <contributors>
    <contributor>Contributors to the ANGLE_multi_draw specification</contributor>
    <contributor>Members of the WebGL working group</contributor>
  </contributors>

  <number>40</number>

  <depends>
    <api version="1.0"/>
  </depends>

  <overview>
    <mirrors href="https://chromium.googlesource.com/angle/angle/+/master/extensions/ANGLE_multi_draw.txt" name="ANGLE_multi_draw">
      <addendum>
        This extension only exposes the <code>MultiDrawArraysANGLE</code>, <code>MultiDrawElementsANGLE</code>, <code>MultiDrawArraysInstancedANGLE</code>, and <code>MultiDrawElementsInstancedANGLE</code> entrypoints as <code>multiDrawArraysWEBGL</code>, <code>multiDrawElementsWEBGL</code>, <code>multiDrawArraysInstancedWEBGL</code>, and <code>multiDrawElementsInstancedWEBGL</code>.
      </addendum>
      <addendum>
        The implementation must validate the arrays and indices referenced by <code>multiDrawArraysWEBGL</code>, <code>multiDrawElementsWEBGL</code>, <code>multiDrawArraysInstancedWEBGL</code>, and <code>multiDrawElementsInstancedWEBGL</code>, similarly to how indices referenced by <code>drawArrays</code> and <code>drawElements</code> are validated according to section
        <a href="http://www.khronos.org/registry/webgl/specs/1.0/#ATTRIBS_AND_RANGE_CHECKING">Enabled Vertex Attributes and Range Checking</a> of the
        WebGL specification.
      </addendum>
      <addendum>
        Although the extension name is named WEBGL_multi_draw, the extension must be enabled with the
        <code>#extension GL_ANGLE_multi_draw</code> directive, as shown in the sample code, to use
        the extension in a shader.

        Likewise the shading language preprocessor <code>#define GL_ANGLE_multi_draw</code>, will be defined to 1 if the extension is supported.
      </addendum>
      <addendum>
        The new draw call entrypoints have typed array or sequence arguments instead of pointer arguments. They additionally include <code>*Offset</code> arguments for each array to choose the starting point into the respective typed array or sequence. This primarily avoids allocation of temporary typed array views.
      </addendum>
    </mirrors>
    <div class="nonnormative">
      <p>CAD vendors rendering large models comprised of many individual parts face scalability issues issuing large numbers of draw calls from WebGL. This extension reduces draw call overhead by allowing better batching.</p>
    </div>

    <features>
      <feature>The <code>multiDrawArraysWEBGL</code>, <code>multiDrawElementsWEBGL</code>, <code>multiDrawArraysInstancedWEBGL</code>, and <code>multiDrawElementsInstancedWEBGL</code> entry points are added. These provide a counterpoint to instanced rendering and are more flexible for certain scenarios. They behave identically to multiple calls to <code>drawArrays</code>, <code>drawElements</code>, <code>drawArraysInstanced</code>, and <code>drawElementsInstanced</code> except they handle multiple lists of arguments in one call.</feature>

      <feature>The <code>gl_DrawID</code> builtin is added to the shading language. For any Multi* draw call variant, the index of the draw <code>i</code> may be read by the vertex shader as <code>gl_DrawID</code>. For non Multi* calls, the value of gl_DrawID is 0.</feature>
      <glsl extname="GL_ANGLE_multi_draw">
        <stage type="vertex"/>
        <input name="gl_DrawID" type="int" />
      </glsl>
    </features>
  </overview>

  <idl xml:space="preserve">

[NoInterfaceObject]
interface WEBGL_multi_draw {
  void multiDrawArraysWEBGL(
      GLenum mode,
      (Int32Array or sequence&lt;GLint&gt;) firstsList, GLuint firstsOffset,
      (Int32Array or sequence&lt;GLsizei&gt;) countsList, GLuint countsOffset,
      GLsizei drawcount);
  void multiDrawElementsWEBGL(
      GLenum mode,
      (Int32Array or sequence&lt;GLint&gt;) countsList, GLuint countsOffset,
      GLenum type,
      (Int32Array or sequence&lt;GLsizei&gt;) offsetsList, GLuint offsetsOffset,
      GLsizei drawcount);
  void multiDrawArraysInstancedWEBGL(
      GLenum mode,
      (Int32Array or sequence&lt;GLint&gt;) firstsList, GLuint firstsOffset,
      (Int32Array or sequence&lt;GLsizei&gt;) countsList, GLuint countsOffset,
      (Int32Array or sequence&lt;GLsizei&gt;) instanceCountsList, GLuint instanceCountsOffset,
      GLsizei drawcount);
  void multiDrawElementsInstancedWEBGL(
      GLenum mode,
      (Int32Array or sequence&lt;GLint&gt;) countsList, GLuint countsOffset,
      GLenum type,
      (Int32Array or sequence&lt;GLsizei&gt;) offsetsList, GLuint offsetsOffset,
      (Int32Array or sequence&lt;GLsizei&gt;) instanceCountsList, GLuint instanceCountsOffset,
      GLsizei drawcount);
};

  </idl>

  <security>
    The multi-draw APIs are subject to all of the same rules regarding <a href="https://www.khronos.org/registry/webgl/specs/latest/1.0/#4.5">out-of-range array accesses</a> as the core WebGL APIs.
  </security>

  <samplecode xml:space="preserve">
    <pre>
var ext = gl.getExtension("WEBGL_multi_draw");

{
  // multiDrawArrays variant.
  let firsts = new Int32Array(...);
  let counts = new Int32Array(...);
  ext.multiDrawArraysWEBGL(gl.TRIANGLES, firsts, 0, counts, 0, firsts.length);
}

{
  // multiDrawElements variant.
  // Assumes that the indices which have been previously uploaded to the
  // ELEMENT_ARRAY_BUFFER are to be treated as UNSIGNED_SHORT.
  let counts = new Int32Array(...);
  let offsets = new Int32Array(...);
  ext.multiDrawElementsWEBGL(
      gl.TRIANGLES, counts, 0, gl.UNSIGNED_SHORT, offsets, 0, counts.length);
}

{
  // multiDrawArraysInstanced variant.
  let firsts = new Int32Array(...);
  let counts = new Int32Array(...);
  let instanceCounts = new Int32Array(...);
  ext.multiDrawArraysInstancedWEBGL(
      gl.TRIANGLES, firsts, 0, counts, 0, instanceCounts, 0, firsts.length);
}

{
  // multiDrawElementsInstanced variant.
  // Assumes that the indices which have been previously uploaded to the
  // ELEMENT_ARRAY_BUFFER are to be treated as UNSIGNED_SHORT.
  let counts = new Int32Array(...);
  let offsets = new Int32Array(...);
  let instanceCounts = new Int32Array(...);
  ext.multiDrawElementsInstancedWEBGL(
      gl.TRIANGLES, counts, 0, gl.UNSIGNED_SHORT, offsets, 0, instanceCounts, 0,
      counts.length);
}

    </pre>
    <pre>
#extension GL_ANGLE_multi_draw : require
void main() {
    gl_Position = vec4(gl_DrawID, 0, 0, 1);
}
    </pre>
  </samplecode>

  <tests/>

  <issues/>

  <history>
    <revision date="2018/11/09">
      <change>Initial version.</change>
    </revision>
    <revision date="2019/01/21">
      <change>Moved to draft.</change>
    </revision>
    <revision date="2019/10/23">
      <change>Merged features with WEBGL_multi_draw_instanced.</change>
    </revision>
  </history>
</draft>
