<?xml version="1.0" encoding="UTF-8"?>
<proposal href="proposals/ANGLE_shader_pixel_local_storage/">
  <name>ANGLE_shader_pixel_local_storage</name>

  <contact> <a href="https://www.khronos.org/webgl/public-mailing-list/">WebGL working group</a> (public_webgl 'at' khronos.org) </contact>

  <contributors>
    <contributor>Chris Dalton, Rive</contributor>
    <contributor>Kenneth Russell, Google Inc.</contributor>
    <contributor>Shahbaz Youssefi, Google Inc.</contributor>
    <contributor>Kelsey Gilbert, Mozilla Corp.</contributor>
    <contributor>Geoff Lang, Google Inc.</contributor>
    <contributor>Kimmo Kinnunen, Apple Inc.</contributor>
    <contributor>Members of the WebGL working group</contributor>
  </contributors>

  <number>NN</number>

  <depends>
    <api version="2.0"/>
  </depends>

  <overview>
    <mirrors href="https://chromium.googlesource.com/angle/angle/+/refs/heads/main/extensions/ANGLE_shader_pixel_local_storage.txt"
             name="ANGLE_shader_pixel_local_storage">
      <addendum>
        <code>FramebufferMemorylessPixelLocalStorageANGLE</code> is not supported.
      </addendum>
    </mirrors>
    <p>
      Although the extension contains ANGLE in the name, it may be exposed by
      any implementation, whether or not the implementation uses the ANGLE
      library.
    </p>
  </overview>

  <idl xml:space="preserve">
[Exposed=(Window,Worker), LegacyNoInterfaceObject]
interface ANGLE_shader_pixel_local_storage {
  const GLenum MAX_PIXEL_LOCAL_STORAGE_PLANES_ANGLE = 0x96E0;
  const GLenum MAX_COLOR_ATTACHMENTS_WITH_ACTIVE_PIXEL_LOCAL_STORAGE_ANGLE = 0x96E1;
  const GLenum MAX_COMBINED_DRAW_BUFFERS_AND_PIXEL_LOCAL_STORAGE_PLANES_ANGLE = 0x96E2;
  const GLenum PIXEL_LOCAL_STORAGE_ACTIVE_PLANES_ANGLE = 0x96E3;
  const GLenum LOAD_OP_ZERO_ANGLE = 0x96E4;
  const GLenum LOAD_OP_CLEAR_ANGLE = 0x96E5;
  const GLenum LOAD_OP_LOAD_ANGLE = 0x96E6;
  const GLenum LOAD_OP_DISABLE_ANGLE = 0x96E7;
  const GLenum STORE_OP_STORE_ANGLE = 0x96E8;
  const GLenum PIXEL_LOCAL_FORMAT_ANGLE = 0x96E9;
  const GLenum PIXEL_LOCAL_TEXTURE_NAME_ANGLE = 0x96EA;
  const GLenum PIXEL_LOCAL_TEXTURE_LEVEL_ANGLE = 0x96EB;
  const GLenum PIXEL_LOCAL_TEXTURE_LAYER_ANGLE = 0x96EC;
  const GLenum PIXEL_LOCAL_CLEAR_VALUE_FLOAT_ANGLE = 0x96ED;
  const GLenum PIXEL_LOCAL_CLEAR_VALUE_INT_ANGLE = 0x96EE;
  const GLenum PIXEL_LOCAL_CLEAR_VALUE_UNSIGNED_INT_ANGLE = 0x96EF;
  undefined framebufferTexturePixelLocalStorageANGLE(GLint plane,
                                                     GLuint backingtexture,
                                                     GLint level,
                                                     GLint layer);
  undefined framebufferPixelLocalClearValuefvANGLE(GLint plane, Float32List values);
  undefined framebufferPixelLocalClearValueivANGLE(GLint plane, Int32List values);
  undefined framebufferPixelLocalClearValueuivANGLE(GLint plane, Uint32List values);
  undefined beginPixelLocalStorageANGLE(sequence&lt;GLenum&gt; loadops);
  undefined endPixelLocalStorageANGLE(sequence&lt;GLenum&gt; storeops);
  undefined pixelLocalStorageBarrierANGLE();
  any getFramebufferPixelLocalStorageParameterANGLE(GLint plane, GLenum pname);
};
  </idl>

  <history>
    <revision date="2022/12/06">
      <change>Initial Draft.</change>
    </revision>
  </history>
</proposal>
