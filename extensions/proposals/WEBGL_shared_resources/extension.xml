<?xml version="1.0"?>

<proposal href="proposals/WEBGL_shared_resources/">
  <name>WEBGL_shared_resources</name>
  <contact>
    <a href="https://www.khronos.org/webgl/public-mailing-list/">WebGL working group</a> (public_webgl 'at' khronos.org)
  </contact>
  <contributors>
    <contributor>Members of the WebGL working group</contributor>
  </contributors>
  <number>12</number>
  <depends>
    <api version="1.0.1"/>
  </depends>
  <overview>
    <p>
      This extension adds the ability to share WebGL resources across contexts.
    </p>
    <features>
      <feature>
        <p>Adds a new context creation parameter:</p>
        <dl>
            <dt><span class="prop-value">shareGroup</span></dt>
                <dd>
                    <em>Default: undefined</em>. If the value is set to the <code>group</code>
                    attribute from the <code>WEBGL_shared_resources</code> object from an existing context
                    then resources from the existing context are shared with the newly created context.
                </dd>
        </dl>
        <pre class="example">
var canvas1 = document.createElement("canvas");
var canvas2 = document.createElement("canvas");
var ctx1 = canvas1.getContext("webgl");
var sharedResourcesExtension = ctx1.getExtension("WEBGL_shared_resources");
var ctx2 = canvas2.getContext("webgl", {
    shareGroup: sharedResourcesExtension.group
});
        </pre>
      </feature>
      <feature>
      All <code>WebGLTexture</code>, <code>WebGLRenderbuffer</code>, <code>WebGLBuffer</code>,
      <code>WebGLShader</code> and <code>WebGLProgram</code> objects are shared among contexts in the
      same share group.
      <code>WebGLFramebuffer</code> objects are expliclity
      not shared as their behavior is undefined per OpenGL ES 2.0 spec Appendix C.
      </feature>
      <feature>
      All shared objects effectively belong to the <code>WebGLShareGroup</code>, not to the <code>WebGLRenderingContext</code>.
      As such they can be used with any <code>WebGLRenderingContext</code> in the same share group. Errors generated
      when an object is not from the same context must be changed to generate an error if the object
      is not from the same group.
      </feature>
    </features>
  </overview>
  <issues>
    <ul>
      <li>
          <div>Q: Should <code>WEBGL_lose_context</code> <code>loseContext</code> lose all contexts in the group?</div>
          <div>A: Yes, and <code>restoreContext</code> should restore all contexts which are restorable.</div>
      </li>
      <li>
          <div>Q: Should a <code>WebGLUniformLocation</code> be usable across contexts?</div>
          <div>A: Yes. They don't seem need to be tied to a context. Rather they are tied
                  to a particular <code>WebGLProgram</code>.</div>
      </li>
      <li>
          <div>Q: How should deletions of <code>WebGLBuffers</code> be handled?</div>
          <div>A: The OpenGL ES 2.0 specifies that deleted buffers have undefined behavior.
                  WebGL implementations must enforce a more consistent reference counted like
                  behavior and if necessary do their own ref counting and not actually
                  call DeleteBuffer until all references across all contexts have been released.
          </div>
      </li>
      <li>
          <div>Q: Does a WebGL implementation need to take any special care to ensure changes to resources in one context
                  are seen in another context.</div>
          <div>A: Maybe? The OpenGL ES 2.0 spec Appendix C.2.3 seems to makes it clear that changes to
                  a resource in one context are not guarnteed to be seen in another context
                  unless <code>flush</code> is called in the context making the change and
                  <code>bind???</code> for the resource in question is called in the
                  context that wants to observe the change. A context may see the change
                  before binding but is only guaranteed to see the change after binding.<br/><br/>
                  Unfortunately there are undefined implicit flushes in WebGL, usually by
                  the browser's compositor. The differences on when those flushes happen will
                  mean developers not calling flush directly will see different behaivor
                  on different browsers.</div>
      </li>
      <li>
          <div>Q: How do you tell if 2 contexts are sharing resources</div>
          <div>A: Compare their groups.
          <pre class="example">
function inSameGroup(context1, context2) {
  var sharedResourcesExtension1 = context1.getExtension("WEBGL_shared_resources");
  var sharedResourcesExtension2 = context2.getExtension("WEBGL_shared_resources");
  return sharedResourcesExtension1.group === sharedResourcesExtension2.group;
}
          </pre>
          </div>
      </li>
    </ul>
  </issues>
  <idl xml:space="preserve">
interface WEBGL_shared_resources {
    readonly attribute WebGLShareGroup group;
};

interface WebGLShareGroup {
};
  </idl>
  <history>
    <revision date="2012/02/06">
      <change>Initial revision.</change>
    </revision>
  </history>
</proposal>
