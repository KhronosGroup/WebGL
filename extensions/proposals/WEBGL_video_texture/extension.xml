<?xml version="1.0" encoding="UTF-8"?>
<proposal href="proposals/WEBGL_video_texture/">
  <name>WEBGL_video_texture</name>

  <contact> <a href="https://www.khronos.org/webgl/public-mailing-list/">WebGL
  working group</a> (public_webgl 'at' khronos.org) </contact>

  <contributors>
    <contributor>Byungseon Shin (sun.shin 'at' lge.com)</contributor>
    <contributor>Andrey Volykhin (andrey.volykhin 'at' lge.com)</contributor>
    <contributor>Members of the WebGL working group</contributor>
  </contributors>

  <number>NN</number>

  <depends>
    <api version="1.0"/>
  </depends>

  <overview>
    <mirrors href="https://www.khronos.org/registry/gles/extensions/OES/OES_EGL_image_external.txt"
             name="OES_EGL_image_external">
      <addendum>Defines a new texture target <code>TEXTURE_VIDEO_IMAGE_WEBGL</code> and a new sampler type <code>SAMPLER_VIDEO_IMAGE_WEBGL</code></addendum>
      <addendum>Provides a mechanism for binding <code>HTMLVideoElement</code> stream to video texture targets.</addendum>
      <addendum>Provides time of frame, texture width and height of <code>HTMLVideoElement</code>'s texture binding.</addendum>
    </mirrors>

    <features>
      <feature>Add support for <code>WEBGL_video_texture</code>
      binding of HTMLVideoElement.</feature>
      <feature><code>TEXTURE_VIDEO_IMAGE_WEBGL</code> and <code>TEXTURE_2D</code> are distinct.</feature>
      <feature>Textures bound to <code>TEXTURE_VIDEO_IMAGE_WEBGL</code> only accept <code>LINEAR</code> and <code>NEAREST</code>
        for <code>TEXTURE_MIN_FILTER</code> and <code>TEXTURE_MAG_FILTER</code>.</feature>
      <feature>Textures bound to <code>TEXTURE_VIDEO_IMAGE_WEBGL</code> only accept <code>CLAMP_TO_EDGE</code> for
        <code>TEXTURE_WRAP_S</code> and <code>TEXTURE_WRAP_T</code>.</feature>
      <feature>The maximum mipmap level of textures that bind to <code>TEXTURE_VIDEO_IMAGE_WEBGL</code> is 1.</feature>
      <feature><code>shareVideoImageWEBGL</code> will lock video frame and reject another video source until call
        <code>releaseVideoImageWEBGL</code>.</feature>
      <feature>If the application does not call releaseVideoImageWEBGL, then all of the WebGLTextures with which video
        frames were shared will be implicitly released when the current JavaScript code returns control to the user agent.</feature>


      <glsl extname="WEBGL_video_texture">
        <stage type="fragment"/>
        <type name="samplerVideoWEBGL"/>

        <function name="textureVideoWEBGL" type="vec4">
          <param name="sampler" type="samplerVideoWEBGL"/>

          <param name="coord" type="vec2"/>
        </function>

      </glsl>
    </features>
  </overview>

  <idl xml:space="preserve">
[NoInterfaceObject]
interface WebGLVideoFrameInfo {
  readonly attribute double currentTime;
  readonly attribute unsigned long textureWidth;
  readonly attribute unsigned long textureHeight;
};

[NoInterfaceObject]
interface WEBGL_video_texture {
    const GLenum TEXTURE_VIDEO_IMAGE_WEBGL             = 0x9248;
    const GLenum SAMPLER_VIDEO_IMAGE_WEBGL             = 0x9249;

    [RaisesException] WebGLVideoFrameInfo shareVideoImageWEBGL(
      GLenum target, HTMLVideoElement video);
    [RaiseException] bool releaseVideoImageWEBGL(GLenum target);
};
  </idl>

  <samplecode xml:space="preserve">

    <p> This a fragment shader that samples a video texture.</p>
    <pre>
    #extension GL_WEBGL_video_texture : require
    precision mediump float;
    varying vec2 v_texCoord;

    uniform samplerVideoWEBGL uSampler;

    void main(void) {
      gl_FragColor = textureVideoWEBGL(uSampler, v_texCoord);
    }
    </pre>

    <p> This shows application that renders video using proposed extension.  </p>
    <pre>
    var videoElement = document.getElementById("video");
    var videoTexture = gl.createTexture();

    function update() {
        var ext = gl.getExtension('WEBGL_video_texture');
        if(ext !=== null){
            gl.bindTexture(ext.TEXTURE_VIDEO_IMAGE_WEBGL, videoTexture);
            ext.shareVideoImageWEBGL(ext.TEXTURE_VIDEO_IMAGE_WEBGL, videoElement);
            ext.releaseVideoImageWEBGL(ext.TEXTURE_VIDEO_IMAGE_WEBGL);
            gl.bindTexture(ext.TEXTURE_VIDEO_IMAGE_WEBGL, null);
        }
    }

    function render() {
        gl.clearColor(0.0, 0.0, 1.0, 1.0);
        gl.clear(gl.COLOR_BUFFER_BIT);

        gl.bindBuffer(gl.ARRAY_BUFFER, squareVerticesBuffer);
        gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);

        gl.activeTexture(gl.TEXTURE0);
        gl.bindTexture(ext.TEXTURE_VIDEO_IMAGE_WEBGL, videoTexture);
        gl.uniform1i(gl.getUniformLocation(shaderProgram, "uSampler"), 0);

        gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);

        ext.releaseVideoImageWEBGL(ext.TEXTURE_VIDEO_IMAGE_WEBGL);
    }
    </pre>

    <p> Application renders each video frames into WebGL canvas based on game-loop pattern. </p>
    <pre>

    while (true) {
       update();
       processInput();
       render();
    }
    </pre>

  </samplecode>

  <tests/>

  <issues/>

  <history>
    <revision date="2016/11/05">
      <change>Initial revision.</change>
    </revision>
    <revision date="2017/01/10">
      <change>Change EGLImageTargetTexture2DOES to be called at every WebGL rendering cycle.</change>
      <change>Add VideoFrameInfo interface.</change>
      <change>Change EGLImageTargetTexture2DOES to return VideoFrameInfo as a currently mapped frame.</change>
    </revision>
    <revision date="2017/08/03">
      <change>Change Extension name to WEBGL_video_texture for abstracion of OES_EGL_image_external extension.</change>
      <change>Define new sampler and texture type, TEXTURE_VIDEO_IMAGE and SAMPLER_VIDEO_IMAGE.</change>
      <change>Change EGLImageTargetTexture2DOES to VideoElementTargetVideoTexture.</change>
    </revision>
    <revision date="2019/04/10">
      <change>Add WEBGL suffix for extension enums.</change>
      <change>Change function name VideoElementTargetVideoTexture to shareVideoImageWEBGL</change>
      <change>Declare possible side effect of TEXTURE_VIDEO_IMAGE_WEBGL.</change>
      <change>Add limitations for TEXTURE_VIDEO_IMAGE_WEBGL</change>
      <change>Add releaseVideoImageWEBGL and implicit release rules</change>
    </revision>
    <revision date="2019/10/25">
      <change>Define textureVideoWEBGL, rather than using texture2D, in ESSL 1.00 shaders.</change>
    </revision>
    <revision date="2019/10/29">
      <change>Allocate enums for TEXTURE_VIDEO_IMAGE_WEBGL and SAMPLER_VIDEO_IMAGE_WEBGL out of
      WebGL's current assigned enum block in the OpenGL extension registry.</change>
    </revision>
  </history>
</proposal>
