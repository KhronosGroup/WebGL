<?xml version="1.0" encoding="UTF-8"?>
<draft href="WEBGL_multi_draw_instanced_base_vertex_base_instance/">

  <name>WEBGL_multi_draw_instanced_base_vertex_base_instance</name>

  <contact> <a href="https://www.khronos.org/webgl/public-mailing-list/">WebGL
  working group</a> (public_webgl 'at' khronos.org) </contact>

  <contributors>
    <contributor>Contributors to the ANGLE_base_vertex_base_instance specification</contributor>
    <contributor>Contributors to the WEBGL_multi_draw specification</contributor>
    <contributor>Members of the WebGL working group</contributor>
  </contributors>

  <number>47</number>

  <depends>
    <api version="2.0"/>
    <ext name="WEBGL_multi_draw" require="true"/>
    <ext name="WEBGL_draw_instanced_base_vertex_base_instance" require="true"/>
  </depends>

  <overview>
    <mirrors href="https://chromium.googlesource.com/angle/angle/+/main/extensions/ANGLE_base_vertex_base_instance.txt" name="ANGLE_base_vertex_base_instance">
      <addendum>
        This extension exposes the <code>MultiDrawArraysInstancedBaseInstanceANGLE</code> and
        <code>MultiDrawElementsInstancedBaseVertexBaseInstanceANGLE</code> entrypoints as
        <code>multiDrawArraysInstancedBaseInstanceWEBGL</code> and
        <code>multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL</code>.
      </addendum>
      <addendum>
        The implementation must validate the arrays and indices referenced by
        <code>multiDrawArraysInstancedBaseInstanceWEBGL</code> and
        <code>multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL</code>, similarly to how indices
        referenced by <code>drawArrays</code> and <code>drawElements</code> are validated according
        to section
        <a href="https://www.khronos.org/registry/webgl/specs/latest/1.0/index.html#6.6">
          Enabled Vertex Attributes and Range Checking
        </a>
        and
        <a href="https://www.khronos.org/registry/webgl/specs/latest/2.0/#RANGE_CHECKING">
          Range Checking
        </a> of the WebGL specification.
      </addendum>
      <addendum>
        Although the extension name is WEBGL_multi_draw_instanced_base_vertex_base_instance,
        the extension must be enabled with the <code>#extension GL_ANGLE_multi_draw</code> directive,
        as shown in the sample code, to use the <code>gl_DrawID</code> built-in in a shader.

        Likewise the shading language preprocessor <code>#define GL_ANGLE_multi_draw</code>, will be defined to 1 if the extension is supported.
      </addendum>
    </mirrors>

    <div class="nonnormative">
      <p>The baseVertex functionality could effectly help reduce CPU overhead with static batching
      and text rendering in game engine implementations.</p>
      <p>The baseInstance functionality could make instanced arrays more useful as they could start
      instancing from a particular point in the buffer.</p>
      <p>The multi draw functionality could help reduce draw call overhead by allowing better
      batching.</p>
    </div>

    <features>
      <feature>
        The <code>multiDrawArraysInstancedBaseInstanceWEBGL</code> and
        <code>multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL</code> entry points are added.
        They behave identically to multiple calls to <code>drawArraysInstanced</code> and
        <code>drawElementsInstanced</code> except they handle multiple lists of arguments in one
        call, plus that the first element within those instanced vertex attributes is specified in
        <code>baseInstancesList</code>.
      </feature>
      <feature>The <code>multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL</code> in addition
        specifies the value of base vertex of each draw call to be values in<code>baseVerticesList</code>
        instead of zero.
      </feature>

      <feature>
        When this extension is enabled, the
        following extensions are enabled implicitly:
        <ul>
          <li><a href="http://www.khronos.org/registry/webgl/extensions/WEBGL_multi_draw">
          WEBGL_multi_draw</a></li>
        </ul>
      </feature>
    </features>
  </overview>

  <idl xml:space="preserve">
[Exposed=(Window,Worker), LegacyNoInterfaceObject]
interface WEBGL_multi_draw_instanced_base_vertex_base_instance {
  undefined multiDrawArraysInstancedBaseInstanceWEBGL(
      GLenum mode,
      ([AllowShared] Int32Array or sequence&lt;GLint&gt;) firstsList, GLuint firstsOffset,
      ([AllowShared] Int32Array or sequence&lt;GLsizei&gt;) countsList, GLuint countsOffset,
      ([AllowShared] Int32Array or sequence&lt;GLsizei&gt;) instanceCountsList, GLuint instanceCountsOffset,
      ([AllowShared] Uint32Array or sequence&lt;GLuint&gt;) baseInstancesList, GLuint baseInstancesOffset,
      GLsizei drawcount
  );
  undefined multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL(
      GLenum mode,
      ([AllowShared] Int32Array or sequence&lt;GLsizei&gt;) countsList, GLuint countsOffset,
      GLenum type,
      ([AllowShared] Int32Array or sequence&lt;GLsizei&gt;) offsetsList, GLuint offsetsOffset,
      ([AllowShared] Int32Array or sequence&lt;GLsizei&gt;) instanceCountsList, GLuint instanceCountsOffset,
      ([AllowShared] Int32Array or sequence&lt;GLint&gt;) baseVerticesList, GLuint baseVerticesOffset,
      ([AllowShared] Uint32Array or sequence&lt;GLuint&gt;) baseInstancesList, GLuint baseInstancesOffset,
      GLsizei drawcount
  );
};
  </idl>

  <newfun>
    <function name="multiDrawArraysInstancedBaseInstanceWEBGL" type="undefined">
      <param name="mode" type="GLenum"/>
      <param name="firstsList" type="([AllowShared] Int32Array or sequence&lt;GLint&gt;)"/>
      <param name="firstsOffset" type="GLuint"/>
      <param name="countsList" type="([AllowShared] Int32Array or sequence&lt;GLsizei&gt;)"/>
      <param name="countsOffset" type="GLuint"/>
      <param name="instanceCountsList" type="([AllowShared] Int32Array or sequence&lt;GLsizei&gt;)"/>
      <param name="instanceCountsOffset" type="GLuint"/>
      <param name="baseInstancesList" type="([AllowShared] Uint32Array or sequence&lt;GLuint&gt;)"/>
      <param name="baseInstancesOffset" type="GLuint"/>
      <param name="drawcount" type="GLsizei"/>
    </function>
    <function name="multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL" type="undefined">
      <param name="mode" type="GLenum"/>
      <param name="countsList" type="([AllowShared] Int32Array or sequence&lt;GLsizei&gt;)"/>
      <param name="countsOffset" type="GLuint"/>
      <param name="type" type="GLenum"/>
      <param name="offsetsList" type="([AllowShared] Int32Array or sequence&lt;GLsizei&gt;)"/>
      <param name="offsetsOffset" type="GLuint"/>
      <param name="instanceCountsList" type="([AllowShared] Int32Array or sequence&lt;GLsizei&gt;)"/>
      <param name="instanceCountsOffset" type="GLuint"/>
      <param name="baseVerticesList" type="([AllowShared] Int32Array or sequence&lt;GLint&gt;)"/>
      <param name="baseVerticesOffset" type="GLuint"/>
      <param name="baseInstancesList" type="([AllowShared] Uint32Array or sequence&lt;GLuint&gt;)"/>
      <param name="baseInstancesOffset" type="GLuint"/>
      <param name="drawcount" type="GLsizei"/>
    </function>
  </newfun>


  <security>
    The multi-draw-base-vertex-base-instance-draw APIs are subject to all of the same rules
    regarding
    <a href="https://www.khronos.org/registry/webgl/specs/latest/1.0/#4.5">
      out-of-range array accesses
    </a>
    as the core WebGL APIs.
  </security>


  <samplecode xml:space="preserve">
    <pre>
var ext = gl.getExtension("WEBGL_multi_draw_instanced_base_vertex_base_instance");

{
  // multiDrawArraysInstancedBaseInstance variant.
  let firsts = new Int32Array(...);
  let counts = new Int32Array(...);
  let instanceCounts = new Int32Array(...);
  let baseInstances = new Uint32Array(...);
  ext.multiDrawArraysInstancedBaseInstanceWEBGL(
      gl.TRIANGLES, first, 0, counts, 0, instanceCounts, 0, baseInstances, 0, counts.length);
}

{
  // multiDrawElementsInstancedBaseVertexBaseInstance variant.
  // Assumes that the indices which have been previously uploaded to the
  // ELEMENT_ARRAY_BUFFER are to be treated as UNSIGNED_SHORT.
  let counts = new Int32Array(...);
  let offsets = new Int32Array(...);
  let instanceCounts = new Int32Array(...);
  let baseVertices = new Int32Array(...);
  let baseInstances = new Uint32Array(...);
  ext.multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL(
      gl.TRIANGLES, counts, 0, gl.UNSIGHNED_SHORT,
      offsets, 0, instanceCounts, 0, baseVertices, 0, baseInstances, 0,
      counts.length);
}
    </pre>
    <pre>
#version 300 es
#extension GL_ANGLE_multi_draw : require
void main() {
    gl_Position = vec4(gl_VertexID, gl_InstanceID, gl_DrawID, 1);
}
    </pre>
  </samplecode>

  <tests/>

  <issues/>

  <history>
    <revision date="2019/08/28">
      <change>Initial version.</change>
    </revision>
    <revision date="2019/09/25">
      <change>Change parameters order.</change>
      <change>Move to draft.</change>
    </revision>
    <revision date="2020/06/26">
      <change>Implicitly enable WEBGL_multi_draw</change>
    </revision>
    <revision date="2020/07/14">
      <change>Change types of countsList, offsetsList, and instanceCountsList from sequence&lt;GLint&gt; to sequence&lt;GLsizei&gt;</change>
      <change>Change type of baseInstances from Int32Array to Uint32Array and sequence&lt;GLint&gt; to sequence&lt;GLuint&gt;</change>
    </revision>
    <revision date="2020/07/28">
      <change>Add parentheses around union types in IDL</change>
    </revision>
    <revision date="2021/05/18">
      <change>Add [AllowShared] to all typed array arguments for compatibility with multi-threaded WebAssembly.</change>
    </revision>
    <revision date="2021/05/26">
      <change>Removed GLSL extension and builtins.</change>
    </revision>
  </history>
</draft>
