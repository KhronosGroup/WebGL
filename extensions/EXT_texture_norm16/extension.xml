<?xml version="1.0" encoding="UTF-8"?>
<extension href="EXT_texture_norm16/">
  <name>EXT_texture_norm16</name>

  <contact> <a href="https://www.khronos.org/webgl/public-mailing-list/">WebGL
  working group</a> (public_webgl 'at' khronos.org) </contact>

  <contributors>
  <contributor>Rijubrata Bhaumik (rijubrata.bhaumik 'at' intel.com)</contributor>
    <contributor>Members of the WebGL working group</contributor>
  </contributors>

  <number>44</number>

  <depends>
    <api version="2.0"/>
  </depends>

  <overview>

    <mirrors href="https://www.khronos.org/registry/OpenGL/extensions/EXT/EXT_texture_norm16.txt"
             name="EXT_texture_norm16">
        <addendum>Support for <code>UNSIGNED_SHORT</code> textures as FBO
        attachments.</addendum>
    </mirrors>

    <features>
      <feature>This extension provides a set of new 16-bit signed normalized
      and unsigned normalized fixed point texture, renderbuffer and texture
      buffer formats. The 16-bit normalized fixed point types
      <code>R16_EXT</code>, <code>RG16_EXT</code> and <code>RGBA16_EXT</code>
      become available as color-renderable formats. Renderbuffers can be
      created in these formats. These and textures created with
      <code>type = UNSIGNED_SHORT</code>, which will have one of these internal
      formats, can be attached to framebuffer object color attachments for
      rendering.
      </feature>

      <feature> The <code>texImage2D</code> and <code>texSubImage2D</code>
      entry points taking <code>ArrayBufferView</code> are extended to accept
      <code>Uint16Array</code> with the pixel type <code>UNSIGNED_SHORT</code>
      and <code>Int16Array</code> with the pixel type <code>SHORT</code>.
      </feature>

      <feature> The <code>texImage2D</code> and <code>texSubImage2D</code>
      entry points taking <code>ImageBitmap</code>, <code>ImageData</code>,
      <code>HTMLImageElement</code>, <code>HTMLCanvasElement</code>, <code>HTMLVideoElement</code>,
      and <code>OffscreenCanvas</code> are extended to accept the pixel type
      <code>UNSIGNED_SHORT</code>, with associated internal format being one of
      <code>R16_EXT</code>, <code>RG16_EXT</code>,
      <code>RGB16_EXT</code>, and <code>RGBA16_EXT</code>.
      Information on whether each type is supported
      can be queried from calling the <code>getSupportedInputs</code> function.
      When the data source is a DOM element (HTMLImageElement, HTMLCanvasElement, or HTMLVideoElement),
      or is an ImageBitmap, ImageData, or OffscreenCanvas object with only 8 bit per channel unsigned integer content,
      the conversion to 16 bit is requantized (e.g. 0x42 -> 0x4242).
      </feature>
    </features>
  </overview>

  <idl xml:space="preserve">
[NoInterfaceObject]
interface EXT_texture_norm16 {
  const GLenum R16_EXT = 0x822A;
  const GLenum RG16_EXT = 0x822C;
  const GLenum RGB16_EXT = 0x8054;
  const GLenum RGBA16_EXT = 0x805B;
  const GLenum R16_SNORM_EXT = 0x8F98;
  const GLenum RG16_SNORM_EXT = 0x8F99;
  const GLenum RGB16_SNORM_EXT = 0x8F9A;
  const GLenum RGBA16_SNORM_EXT = 0x8F9B;
};

enum TextureNorm16SupportedInputTypes {
  "arraybufferview",
  "imagebitmap",
  "imagedata",
  "htmlimageelement",
  "htmlcanvaselement",
  "htmlvideoelement",
  "offscreencanvas"
};
  </idl>

  <newfun>
    <function name="getSupportedInputs" type="sequence&lt;TextureNorm16SupportedInputTypes&gt;">
      Returns the names of the input types supported by the implementation. As of this writing,
      possibly valid return values are "arraybufferview", "imagebitmap", "imagedata",
      "htmlimageelement", "htmlcanvaselement", "htmlvideoelement", and "offscreencanvas" as stated in the idl <code>enum TextureNorm16SupportedInputTypes</code>.
    </function>
    <div class="note">
      The intent of the <code>getSupportedInputs</code> function is to not blocking broswers from advertising
      this extension without having decoding support for 16-bit-per-channel-color-depth unsigned normalized images, and users
      from using it not caring about the image element uploading.
    </div>
  </newfun>

  <history>
    <revision date="2019/03/27">
      <change>Initial Draft.</change>
    </revision>
    <revision date="2019/09/25">
      <change>Promoted to Draft.</change>
    </revision>
    <revision date="2020/08/10">
      <change>Specialized to WebGL 2.0 after WG agreement, since this
      extension refers to sized internal formats unavailable in WebGL
      1.0.</change>
    </revision>
    <revision date="2020/08/13">
      <change>Promoted to Community Approved.</change>
    </revision>
    <revision date="2020/11/09">
      <change>Update behaviors for uploading various image element types.</change>
      <change>Add a new function getSupportedInputs.</change>
    </revision>
  </history>
</extension>
